21.02.2014
1. Критерий повторов
[0..n-1] - дискр. псевдослучайные числа.
k - длина повторения
k>=2
a1,...,am - псевдосл. последовательность
S - слово = количеству i: a_i = a_(i+1) = a_(i+2) = a_(i+k-1)
k = 2
S - ?
a1,...,a_(m-1) - совпадёт ли a_i c a_(i+1), если да r_i = 1.
S = sum([a_i = a_(i+1)])
M(S) = M(sum([a_i = a_(i+1)]) = sum(p(a_i = a_(i+1))*1 + sum(p(a_i != a_(i+1))*0) = sum(1/n) = (m-1)/n.
[0..n-1]
K(m) - кол-во различных чисел среди a1a2...am
S - мин. число, что K(S) = r
S = r + sum(x_i)
M(S) = M(r + sum(x_i)) = r + sum(M(x_i)) = 1 + n(sum(1/j)(from 1 to n-1) - sum(1/j)(from 1 to n-1)) = 1 + n* ln(n/n-r+1)
k - параметр.
S = sum[|a_i - a_(i+1)|<=k]
M(S) = M((sum[|a_i - a_(i+1] <= k]) = sum(p(|a_i - a_(i+1)|)<=k
[0..n-1] n = 2^r
[0..1> - x_i - вещ. числа

template<unsigned p, unsigned n>
class field {
	operator +=
	operator -=
	operator /=
	operator *=
};

operator +
operator -
operator /
operator *
pow(field<q>,int>

q = p^n, p - простое.
template<int p,int n>
struct pow{
	static const int value = p*pow<p,n-1>::value;
};

template<int p>
struct pow<p,0>{
	static const int value = 1;
};

template<int p,int q>
struct log{
	static const int value = log_impl<p,q,q>::value;
};
template <int p,int q,int b>
struct log_impl{
	static const int value = q == pow<p,b-1>::value? b -1: log_impl<p,b-1>::value;
};

template <int p, int q, 0>
struct log_impl{};
template<int a>
struct int _{
	const static int value = a;
};

template<bool c,class A,class b>
struct if_: 	A{};

template<class A, class B>
struct if_<false, A,B> : B {};