26.02.2013
1987 год
Если d < N^0.25 => RSA небезопасный(получение d из (N,e)).
1998 год.
Для d < N^0.292 => RSA небезопасный.

d > N^0.5 - RSA безопасный.
#
(N,e), нужно получить d. Известно, что d < (N^0.25)/3
e*d = 1(phi(n)) => существует k from Z : e*d = k*phi(n)+1
Поделим равенство на d*phi(n).
e/phi(n) = k/d + 1/(d*phi(n))
e/phi(n) - k/d = 1/(d*phi(n))

RSA на практике.
Ключ симметричного шифрования на 20 лет.
2048 бит - недостаточно
n ~ 5000 бит - увеличение срока работы в 100 раз.
Разбалансированный RSA
p - 1000 бит
q - 4000 бит
N - 5000 бит

m from [1..p-1]

e<100
n1 = 7308135796933666030405753505918470327030105502417938075976580804636068338405892228999498674494448955006505355907591477273034276631097130403553085519986507
n2 = 6296140255556115154985623208644669753580759782092604877527866679191668333456831086176430432539715597567027828621614827904075697003846521957164056440237457
n3 = 7830059446986935763237167131738909987293456700270826384056762015180278997675982749784324411077859817933380893778608311907779233896489975971223181723742971

c1 = 4867189091232677488218551650203875271636767570847911837118351472001678955739121515597052160293892409366481547203017281411885367658013543332019489489908143
c2 = 4434457427049382736044192948657027146813540796142669835027649491354744090529316642655228920095276238884200790870724451585980134499428603109574296054140065
c3 = 5604632813512112584855068356869546120216366196452069125424218677502009834121752180642930953193091090481499177385739565584838059181312572532716277581331762

Атаки на реализацию RSA
1)Атаки на основе анализа времени - 1997
с^d - расшифрование.
(Дихотомическое возведение в степень
d = d_n 0 0 .. 1 d_0
a_0 = a
a_i = a^2_(i-1)*a^d(i)_(i-1)(N)
...
a_p = a^d

2)Атака на основе потребляемой мощности.
c^d - с ошибкой => d имея только (N,e)
m = c^d(N)

m_p = c^d(p)
m_q = c^d(q)  = m(N)

Произошла ошибка
m_p = c^d(p)
(m_q)' != c^d(q)

(m_p)^e = c(p)			(m')^e = c(p)
(m_n)'^e != c(q)  => 	(m')^e != c(q)

3)Атака на RSA при использовании плохого генератора случайных чисел.
G: PRG(secd)
Пусть у PRG есть метод получить_хорошее_простое_число
p = PRG.prime();
RG.addbytes(byte[]);
q = PRG.prime();
N = p*q
d = e^(-1)(phi(n));

Если генератор плохой, то инициализационная последовательность