08.04.2013
Сетевые модели.
2)F(x~) <= F*(y~)
3)К каждому допустимому плану двойственной задачи, можно поставить в соответствие план прямой задачи
4)Существует доп x~ -> существует доп y
Задача о вершиннонепересекающихся путях.
Задан граф, неориентированный. Выделяется две вершины, одна сток, другая исток.
x_н - исток
x_к - сток
Требуется найти максимальное количество путей из начальной вершины в конечную так, чтобы они не пересекались, кроме начальной и конечной точек.
0 1 6 8
0 2 4 7 8
0 3 5 8
Сведение задачи о нахождении максимального количества непересекающихся путей к задаче линейного программирования:
Обозначим все рёбра переменными
y_01 y_02 y_03 ... y_16 ...
y_10 y_20 y_30 ... y_61 ...
Тогда ограничения можно записать в следующем виде: для всех вершин,кроме начальной и конечной.
y_01+y_14+y_16 <= 1 - в каждую вершину входит не более одного пути
y_01+y_14+y_16 = y_10 + y_41 + y_61
y02+y24+y25 <=1
y_02 + y_24 + y25 = y_20 + y42 + u52
y_01 + y_02 + y_03 -> max

Двойственная задача - задача о нахождении минимального разделяющего множества вершин.
Определение. Множество вершин называется разделяющим, если граф полученный удалением этого разделяющего множества вершин, распадается на несколько областей
связности, причём x_н и x_к находятся в разных областях связности.
Введём понятие - множество достижимых вершин
Начальная вершина - является достижимой
Если какая-то вершина(кроме начальной и конечной) не входит ни в один из путей и соседняя с ней вершина является достижимой, то она тоже достижимая.
Если вершина x входит в какой-нибудь путь и вершина y находится в этом же пути после вершины x и есть вершина z достижимая и соседняя с y, то х тоже достижима.
Все недостижимые вершины соседние с достижимыми, мы берём в качестве плана двойственной задачи(разделяющего множества)

Теорема Менгера в вершинной форме.
Максимальное количество вершиннонепересекающихся путей равно размеру минимального разделяющего множества.
Доказательство:


Если план двойственной задачи недопустимый, то план прямой задачи можно улучшить.

100 5	8	4	3
150 3	7	6	5
200 4 	5 	8 	4
	70	80	100	150
	
30	5	8	4	3
150	3	7	6	5
200	4	5	8	4
	0	80	100	150
0	5	8	4	3
100	3	7	6	5
200	4	5	8	4
	0	0	100	150
	
100 5/70 8/30 4     3	  0
150 3    7/50 6/100 5 	  0
200 4	 5	  8/eps 4/150 0/50
	70   80   100   150   50
1)
5	5	8
4		7	6
6			8	4	0
	0	3	2	-2	-6
	
5	5	8	-3	0	1
4	-1	7	6	3	2
6	-2	-4	8	4	0
	0	3	2	-2	-6

Выбираем в матрице минимальное значение - -4(если отрицательных нет, то конец алгоритма)
Цикл пересчёта проходит только через исходные клетки в матрице 1, и на каждом шаге должен быть поворот.
Вычтем минимальный элемент с минусом из  цикла из всех.
Новый пересчёт
5	5	8	-3	-4	-3
4	-1	7	6	-1	-2
2	2	5	4	4	0
	0	3	2	2	-2
	
