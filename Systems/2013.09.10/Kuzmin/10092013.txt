10.09.2013
Алгоритм построения наиболее общего унификатора.
<t1 t2 ... tn>
<p1 p2 ... pn>
На первом шаге формируется стек из целей унификации. Целью является пара термов, которые необходимо унифицировать. Далее алгоритм записывается в виде цикла:
пока стек не пуст, из него извлекается цель унификации.
t	p
------					x не входит в p
x	p					Тогда х заменяется на p,
						x входит в p, тогда унификация невозможна
					
-----				
x	x					Не делаем ничего

-----				
a	a					Не делаем ничего

-----
a	p					p!=a - унификация невозможна

Симметричные случаи рассматриваются аналогично. Остается ситуация, когда с обоих сторон терм, состоящий из функциональных элементов.

-----
q(t1...tk)	q(p1...pk)	Если внешний функциональный символ одинаковый, то в стек записываются пары <t1,p1>,<t2,p2>,...,<tn,pn>. Иначе унификация невозможна.

Найденную подстановку по первому правилу записываем в наиболее общий унификатор(ответ) и выполняем эту подстановку во всем стеке.

Доказательство корректности алгоритма.
Докажем, что этот алгоритм конечен.
Результатом применения первого правила является уменьшение количества переменных на одну.
В результате применения правила(q(t1...tk)	q(p1...pk)) глубина терма уменьшается на единицу.
Если выполняется правило когда не делаем ничего, то стек уменьшается на пару.
Значит, этот алгоритм в любом случае остановится.

A(t(x,p(z)),a,y)
!A(t(b,y),z,p(a))
1. Помещаем в стек пары
<t(x,p(z)),t(b,y)>
<a,z>
<y,p(a)>
2. Извлекаем пару <t(x,p(z)),t(b,y)>
3. Помещаем пары <p(z),y> и <x,b>
4. Замена y на p(z)
<x,b>
<a,z>
<p(z),p(a)>
5. Замена x на b
<a,z>
<p(z),p(a)>
6. Замена z на a
p(a),p(a)
7. Извлекаем пару и помещаем <a,a>

Результат
A(t(b,p(a)),a,p(a))
!A(t(b,p(a)),a,p(a))

1.Исчисление называется противоречивым, если в нем можно доказать утверждение и его отрицание.
Метод резолюций непротиворечив.
2. Исчисление называется полным, если для любого утверждения в нем истинно либо утверждение, либо его отрицание.
Исчисление предикатов является полным.
3. Теорема Гёделя. Любое исчисление включающее в себя формальную арифметику неполно.
4. Исчисление называется разрешимым, если существует алгоритм, который для любой формулы говорит истинна она или нет.


Идентификаторы в PROLOG делятся на 2 класса: переменные и непеременные.
Имена переменных начинаются с заглавной буквы.